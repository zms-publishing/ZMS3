<dtml-call "REQUEST.set('entity_',REQUEST.get('entity'))">
<dtml-call "REQUEST.set('entity',SESSION[sessqentitykey])"><dtml-if ZMS_ENTITY><dtml-call "REQUEST.set('entity',ZMS_ENTITY)"></dtml-if>

<dtml-in grid_cols mapping>
<dtml-unless "id in REQUEST.get('qexcludeids',[])">

<dtml-comment>
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
+- MULTIMULTISELECT
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
</dtml-comment>
 <dtml-if multimultiselect>
   <dtml-call "REQUEST.set('mmsid','%s_%s'%(multimultiselect.get('tablename'),multimultiselect.get('fk')))">
   <dtml-if ZMS_TABLE_PREFIX><dtml-call "REQUEST.set('mmsid',ZMS_TABLE_PREFIX+'_'+mmsid)"></dtml-if>
   <dtml-call "writeBlock('[%s.intersection_sql]: mmsid=%s'%(meta_type,mmsid))">
   <!-- ### DELETE -->
   <dtml-call "REQUEST.set('sqlStatement',[])">
   <dtml-call "sqlStatement.append('DELETE FROM ' + multimultiselect['tablename'] + ' ')">
   <dtml-call "sqlStatement.append('WHERE ' + multimultiselect['fk'] + '=' + str(sql_quote__(entity,primary_key,rowid)))">
   <dtml-call "REQUEST.set('sqlStatement',''.join(sqlStatement))">
   <dtml-try>
    <dtml-call "executeQuery(sqlStatement)">
   <dtml-except>
    <dtml-call "REQUEST.set('message',message+'SQL-ERROR: '+sqlStatement+'<br/>')"> 
   </dtml-try>
   <!-- ### INSERT -->
   <dtml-in "REQUEST.get(mmsid,[])">
    <dtml-let value=sequence-item fieldnames="[multimultiselect.get('fk')]" values="[sql_quote__(entity,primary_key,rowid)]">
     <dtml-in "multimultiselect.get('tables',[])" mapping>
      <dtml-let i=sequence-index item=sequence-item v="value.split('/')[i]">
       <dtml-if v>
        <dtml-call "fieldnames.append(fk)">
        <dtml-call "values.append(sql_quote__(item['tablename'],item['fieldname'],v))">
       </dtml-if>
      </dtml-let>
     </dtml-in>
     <dtml-call "REQUEST.set('sqlStatement',[])">
     <dtml-call "sqlStatement.append('INSERT INTO ' + multimultiselect['tablename'] + '(' + ', '.join(fieldnames) + ') VALUES (' + ', '.join(values) + ')')">
     <dtml-call "REQUEST.set('sqlStatement',''.join(sqlStatement))">
     <dtml-try>
      <dtml-call "writeBlock('[%s.intersection_sql]: executeQuery(%s)'%(meta_type,sqlStatement))">
      <dtml-call "executeQuery(sqlStatement)">
     <dtml-except>
      <dtml-call "REQUEST.set('message',message+'SQL-ERROR: '+sqlStatement+'<br/>')"> 
     </dtml-try>
    </dtml-let>
   </dtml-in>

<dtml-comment>
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
+- MULTISELECT
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
</dtml-comment
 ><dtml-elif multiselect
  ><dtml-unless "multiselect.get('custom') or multiselect.get('mysqlset')"
   ><dtml-call "REQUEST.set('mmsid','new_%s'%id)"
   ><dtml-if ZMS_TABLE_PREFIX><dtml-call "REQUEST.set('mmsid',ZMS_TABLE_PREFIX+'_'+mmsid)"></dtml-if
   ><dtml-let old_values="REQUEST.get('old_%s'%mmsid,[])" new_values="REQUEST.get(mmsid,[])" intersection="getEntity(multiselect.get('tablename'))"
   
    ><dtml-comment
    >##### DELETE #####</dtml-comment
    ><dtml-in old_values
     ><dtml-let value=sequence-item w="[]"
      ><dtml-unless "value in new_values"
       ><dtml-call "REQUEST.set('src',None)"
       ><dtml-call "REQUEST.set('dst',None)"
       ><dtml-in "intersection['columns']" mapping
        ><dtml-let col=sequence-item
         ><dtml-if fk
          ><dtml-if "fk.get('tablename',None)==entity and src is None"
           ><dtml-call "REQUEST.set('src',col)"
           ><dtml-call "w.append(col['id']+'='+sql_quote__(entity,primary_key,rowid))"
          ><dtml-else
           ><dtml-call "REQUEST.set('dst',col)"
           ><dtml-call "w.append(col['id']+'='+sql_quote__(intersection['id'],col['id'],value))"
          ></dtml-if
         ></dtml-if
        ></dtml-let
       ></dtml-in
       ><dtml-call "REQUEST.set('sqlStatement',[])"
       ><dtml-call "sqlStatement.append('DELETE FROM ' + intersection['id'] + ' ')"
       ><dtml-call "sqlStatement.append('WHERE ' + ' AND '.join(w))"
       ><dtml-call "REQUEST.set('sqlStatement',''.join(sqlStatement))"
       ><dtml-try
        ><dtml-call "writeBlock('[%s.intersection_sql]: executeQuery(%s)'%(meta_type,sqlStatement))"
        ><dtml-call "executeQuery(sqlStatement)"
       ><dtml-except
        ><dtml-call "REQUEST.set('message',message+'SQL-ERROR: '+sqlStatement+'<br/>')"
       ></dtml-try
      ></dtml-unless
     ></dtml-let
    ></dtml-in
    
    ><dtml-comment
    >##### INSERT #####</dtml-comment
    ><dtml-in new_values
     ><dtml-let value=sequence-item c="[]" v="[]"
      ><dtml-unless "value in old_values"
       ><dtml-call "REQUEST.set('src',None)"
       ><dtml-call "REQUEST.set('dst',None)"
       ><dtml-in "intersection['columns']" mapping
        ><dtml-let col=sequence-item
         ><dtml-if fk
          ><dtml-if "fk.get('tablename',None)==entity and src is None"
           ><dtml-call "REQUEST.set('src',col)"
           ><dtml-call "c.append(col['id'])"
           ><dtml-call "v.append(sql_quote__(entity,primary_key,rowid))"
          ><dtml-else
           ><dtml-call "REQUEST.set('dst',col)"
           ><dtml-call "c.append(col['id'])"
           ><dtml-call "v.append(sql_quote__(intersection['id'],col['id'],value))"
          ></dtml-if
         ></dtml-if
        ></dtml-let
       ></dtml-in
       ><dtml-call "REQUEST.set('sqlStatement',[])"
       ><dtml-call "sqlStatement.append('INSERT INTO ' + intersection['id'] + ' ')"
       ><dtml-call "sqlStatement.append(' ( ' + ' , '.join(c) + ' ) VALUES ( ' + ' , '.join(v) + ' ) ')"
       ><dtml-call "REQUEST.set('sqlStatement',''.join(sqlStatement))"
       ><dtml-try
        ><dtml-call "writeBlock('[%s.intersection_sql]: executeQuery(%s)'%(meta_type,sqlStatement))"
        ><dtml-call "executeQuery(sqlStatement)"
       ><dtml-except
        ><dtml-call "REQUEST.set('message',message+'SQL-ERROR: '+sqlStatement+'<br/>')"
       ></dtml-try
      ></dtml-unless
     ></dtml-let
    ></dtml-in
    
    ><dtml-call "REQUEST.set('message',message+getZMILangStr('MSG_CHANGED')+' (MS: '+intersection['id']+')'+'<br/>')" 
   ></dtml-let
  ></dtml-unless
 ></dtml-if>

<dtml-comment>
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
</dtml-comment>
</dtml-unless>
</dtml-in>

<dtml-call "REQUEST.set('entity',REQUEST.get('entity_'))">