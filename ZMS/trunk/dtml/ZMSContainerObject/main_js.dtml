<dtml-call "REQUEST.RESPONSE.setHeader('Cache-Control','public, max-age=3600')">
<dtml-call "REQUEST.RESPONSE.setHeader('Content-Type', 'text/javascript; charset=utf-8')">

//------------------------------------------------------------------------------
// -- Row-Highlighter
//------------------------------------------------------------------------------

  function zmiTrFollowMouseOver(el)
  {
    var trs = $(el).parents("tr");
    for ( var i = 0; i < trs.length; i++) {
      var tr = trs[i];
      if (tr.id!='undefined' && tr.id.indexOf('tr_')==0) {
        $("a:first",tr).addClass( "zmiHighlightAction");
        $("td.zmiContainerColLeft,td.zmiContainerColCenter,td.zmiContainerColRight",tr).addClass("zmiContainerHighlight");
        return;
      }
    }
  }

  function zmiTrFollowMouseOut(el)
  {
    var trs = $(el).parents("tr");
    for ( var i = 0; i < trs.length; i++) {
      var tr = trs[i];
      if (tr.id!='undefined' && tr.id.indexOf('tr_')==0) {
        $("a:first",tr).removeClass( "zmiHighlightAction");
        $("td.zmiContainerColLeft,td.zmiContainerColCenter,td.zmiContainerColRight",tr).removeClass("zmiContainerHighlight");
        return;
      }
    }
  }

  function zmiTrFollowDblClick(el)
  {
    var trs = $(el).parents("tr");
    for ( var i = 0; i < trs.length; i++) {
      var tr = trs[i];
      if (tr.id!='undefined' && tr.id.indexOf('tr_')==0) {
        var a = $("a:first",tr);
        var href = self.location.href;
        var href_relative = a.attr("href");
        var new_location = href.substr(0,href.lastIndexOf("/")+1)+href_relative;
        self.location = new_location;
        return;
      }
    }
  }

//------------------------------------------------------------------------------
// -- Action-selects 
//------------------------------------------------------------------------------

/**
 * Expand action-select for container-object.
 *
 * @param el
 * @param id
 */
function zmiExpandActionSelectContainer(el, abs_url) 
{
  zmiExpandActionSelect( el, abs_url+"/manage_ajaxFilteredContainerActions");
}

/**
 * Expand action-select for child-object.
 *
 * @param el
 * @param id
 */
function zmiExpandActionSelectChild(el, abs_url) 
{
  var id = $(el).attr('id').substr('select_actions_'.length);
  zmiExpandActionSelect( el, abs_url+"/"+id+"/manage_ajaxFilteredChildActions");
}

/**
 * Expand action-select.
 *
 * @param el
 * @param id
 */
function zmiExpandActionSelect(select, target) 
{
  if ( select.options[select.options.length-1].text.indexOf('---') != 0)
    return;
  
  // Set wait-cursor.
  $(document.body).css( "cursor", "wait");
  
  // JQuery.AJAX.get
  $.get( target+"?lang=<dtml-var lang>", zmiExpandActionSelectHandler);
}

/**
 * Focus select: Process Response..
 */
function zmiExpandActionSelectHandler(data)
{
  // Reset wait-cursor.
  $(document.body).css( "cursor", "auto");
  // Get object-id.
  var id = $("select",data).attr("id").replace(/\./,"_").replace(/\-/,"_");
  var select = document.getElementById( 'select_actions_'+id);
  if ( select.options[select.options.length-1].text.indexOf('---') != 0)
    return;
  var options = $("select",data).children("option");
  for (var i in options) 
  {
    if ( i > 0) 
    {
      var label = $(options[i]).attr('label');
      var value = $(options[i]).attr('value');
      var option = new Option( label, value);
      select.options[ select.length] = option;
    }
  }
  select.selectedIndex = 0;
}

/**
 * Confirm execution of action from select.
 *
 * @param fm
 * @param target
 * @param label
 */
function zmiConfirmAction(fm, target, label)
{
  var b = true;
  var i = countSelectedCheckboxes(fm,'ids');
  if (target.indexOf("../") == 0) {
    i = 1;
  }
  if (target.indexOf("manage_rollbackObjChanges") >= 0) {
    b = confirm("<dtml-var "js_quote(getZMILangStr('MSG_ROLLBACKVERSIONCHANGES'))">");
  }
  else if (target.indexOf("manage_cutObjects") >= 0) {
    var msg1 = "<dtml-var "js_quote(getZMILangStr('MSG_CONFIRM_CUTOBJS'))">";
    msg1 = msg1.replace("%i",""+i);
    <dtml-let langs="getDescendantLanguages(lang)">
     var msg2 = "";
     <dtml-if "len(langs)>1">
      msg2 += "<dtml-var "js_quote(getZMILangStr('MSG_CONFIRM_DESCENDANT_LANGS'))">";
      var s = "";
      <dtml-in langs>
      s += "<dtml-var "getLanguageLabel(_['sequence-item'])">";
      <dtml-unless sequence-end>
      s += ",";
      </dtml-unless>
      </dtml-in>
      msg2 = msg2.replace("%s",""+s);
     </dtml-if>
    </dtml-let>
    var msg = msg1 + ' ' + msg2;
    b = i > 0 && confirm(msg);
  }
  else if (target.indexOf("manage_eraseObjs") >= 0) {
    var msg = "<dtml-var "js_quote(getZMILangStr('MSG_CONFIRM_DELOBJS'))">";
    msg = msg.replace("%i",""+i);
    b = i > 0 && confirm(msg);
  }
  else if (target.indexOf("manage_deleteObjs") >= 0) {
    var msg1 = "<dtml-var "js_quote(getZMILangStr('MSG_CONFIRM_TRASHOBJS'))">";
    msg1 = msg1.replace("%i",""+i);
    <dtml-let langs="getDescendantLanguages(lang)">
     var msg2 = "";
     <dtml-if "len(langs)>1">
      msg2 += "<dtml-var "js_quote(getZMILangStr('MSG_CONFIRM_DESCENDANT_LANGS'))">";
      var s = "";
      <dtml-in langs>
      s += "<dtml-var "getLanguageLabel(_['sequence-item'])">";
      <dtml-unless sequence-end>
      s += ",";
      </dtml-unless>
      </dtml-in>
      msg2 = msg2.replace("%s",""+s);
     </dtml-if>
    </dtml-let>
    var msg = msg1 + ' ' + msg2;
    b = i > 0 && confirm(msg);
  }
  else if (target.indexOf("manage_executeMetacmd") >=0 ) {
   <dtml-in "getMetaCmdIds()">
    <dtml-let metaCmd="getMetaCmd(_['sequence-item'])">
     <dtml-if "len(metaCmd['description'])>0">
      if (label == '<dtml-var "metaCmd['name']">') {
        b = confirm("<dtml-var "metaCmd['description']">");
      }
     </dtml-if>
    </dtml-let>
   </dtml-in>
  }
  else if (target == "") {
    b = false;
  }
  return b;
}

/**
 * Execute action from select.
 *
 * @param fm
 * @param target
 * @param id
 * @param sort_id
 * @param custom
 */
function zmiExecuteAction(fm, target, id, sort_id, custom) 
{
  var fm = $(fm);
  $('input[id=id_prefix]',fm).val( id);
  $('input[id=_sort_id]',fm).val( sort_id);
  $('input[id=custom]',fm).val( custom);
  fm.attr('action',target);
  fm.submit();
}

/**
 * Choose action from select.
 *
 * @param e
 * @param id
 * @param sort_id
 */
function zmiChooseAction(e, id, sort_id) 
{
  var fm = $(e.form);
  var i = e.selectedIndex;
  var label = e.options[i].text;
  var action = e.options[i].value;
  if (action.indexOf("%s/") == 0) {
    action = id + action.substring(2, action.length);
  }
  if (action.indexOf('?') > 0) {
    location.href = action;
  }
  else {
    // Set checkbox.
    $("input[name=ids:list][type=checkbox][value="+id+"]",fm).attr( 'checked', true);
    // Confirm and execute.
    if (zmiConfirmAction(fm,action,label)) {
      zmiExecuteAction(fm,action,id,sort_id,label);
    }
  }
  // Reset checkbox and select.
  $("input[name=ids:list][type=checkbox][value="+id+"]",fm).attr( 'checked', false);
  e.selectedIndex = 0;
}

//------------------------------------------------------------------------------
// -- Action-Buttons
//------------------------------------------------------------------------------

var zmiActionButtons = [
      {'id':'trashcan','standalone':false},
      {'id':'cut','standalone':false},
      {'id':'copy','standalone':false},
      {'id':'paste','standalone':true}
    ];

/**
 *
 * @param sender
 * @param evt
 */
function zmiActionButtonsRefresh(sender,evt) 
{
  var fm = $(sender).parents('form');
  var ids = countSelectedCheckboxes(fm,'ids') > 0;
  // Switch buttons.
  for (var ac in zmiActionButtons) {
     var id = zmiActionButtons[ac]['id'];
     var img = $("img[id^="+id+"Btn]");
     var standalone = zmiActionButtons[ac]['standalone'];
     var active = 0;
     if (ids || standalone) {
       active = 1;
     }
     img.attr('src','<dtml-var MISC_ZMS>btn_'+id+active+'.gif');
  }
  // Switch selected rows.
  var clazz = "zmiTeaserColor";
  var els = $("input[name=ids:list][type=checkbox]");
  for (var i = 0; i < els.length; i++) {
    var tr = $($(els[i]).parents("tr")[0]);
    if (els[i].checked) {
      tr.addClass( clazz);
    }
    else {
      tr.removeClass( clazz);
    }
  }
  // Consume event!
  if (evt) {
    evt.stopPropagation();
  }
}

/**
 *
 * @param sender
 * @param ac		Action-Code
 * @param target
 * @param sort_id
 */
function zmiActionButtonClick(sender, ac, target, sort_id) {
  var fm = $(sender).parents('form');
  // Switch button.
  var ids = countSelectedCheckboxes(fm,'ids') > 0;
  var standalone = zmiActionButtons[ac]['standalone'];
  if (ids || standalone) {
    // Confirm and execute.
    if (zmiConfirmAction(fm,target)) {
      zmiExecuteAction(fm, target,'e',sort_id);
    }
  }
}

/**
 * This method (un-)checks all id-checkboxes on page and refreshs the buttons.
 *
 * @param sender
 * @param v		Boolean value for new (un-)checked state.
 */
function zmiSelectionButtonClick(sender,v) 
{
  var fm = $(sender).parents('form');
  selectCheckboxes(fm,v);
  zmiActionButtonsRefresh();
}
