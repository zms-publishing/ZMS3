<?xml version="1.0" encoding="utf-8"?>

<list>
  <item type="dictionary">
    <dictionary>
      <item key="key"><![CDATA[ZMSIndexZCatalog]]></item>
      <item key="value" type="dictionary">
        <dictionary>
          <item key="__obj_attrs__" type="list">
            <list>
              <item type="dictionary">
                <dictionary>
                  <item key="id"><![CDATA[interface0]]></item>
                  <item key="mandatory" type="int">0</item>
                  <item key="multilang" type="int">0</item>
                  <item key="name"><![CDATA[<tal:block tal:define="zmscontext options/zmscontext">
<div class="form-group">
  <label class="col-sm-2">Index</label>
  <div class="col-sm-10">
    <tal:block tal:condition="python:'zcatalog_index' in zmscontext.getRootElement().getHome().objectIds()">
      <a class="btn btn-default" tal:attributes="href python:'%s/manage_catalogView'%zmscontext.zcatalog_index.absolute_url()" target="_blank"><img tal:attributes="src python:zmscontext.zcatalog_index.icon"/> zcatalog_index</a>
    </tal:block>
    <button class="btn btn-danger" name="btn" value="reindex">Reindex</button>
    <button class="btn btn-danger" name="btn" value="resync">Resync</button>
  </div>
</div><!-- .form-group -->
</tal:block>]]>
                  </item>
                  <item key="repetitive" type="int">0</item>
                  <item key="type"><![CDATA[interface]]></item>
                </dictionary>
              </item>
              <item type="dictionary">
                <dictionary>
                  <item key="custom"><![CDATA[from Products.ZCatalog import ZCatalog
from traceback import format_exception
import logging
import re
import sys

class Clazz:
  pass

def addLexicon(catalog):
  elements = []
  wordSplitter = Clazz()
  wordSplitter.group = 'Word Splitter'
  wordSplitter.name = 'HTML aware splitter'
  elements.append(wordSplitter)
  caseNormalizer = Clazz()
  caseNormalizer.group = 'Case Normalizer'
  caseNormalizer.name = 'Case Normalizer'
  elements.append(caseNormalizer)
  stopWords = Clazz()
  stopWords.group = 'Stop Words'
  stopWords.name = 'Remove listed and single char words'
  elements.append(stopWords)
  catalog.manage_addProduct['ZCTextIndex'].manage_addLexicon('Lexicon', 'Default lexicon', elements)

def ZMSIndexZCatalog_func_( zmscontext, *args, **kwargs):
  logger = logging.getLogger('event.ZMS')
  request = zmscontext.REQUEST
  try:
    id = 'zcatalog_index'
    func_ = args[0]
    zmscontext.writeStdout('ZMSIndexZCatalog.%s:'%(func_))
    
    ##############################################################################
    # Commit
    ##############################################################################
    if func_ == 'commit':
      import transaction
      transaction.commit()
      transaction.begin()
    
    ##############################################################################
    # Search
    ##############################################################################
    elif func_ == 'search':
      ob = None
      catalog = getattr(zmscontext,id,None)
      if catalog is not None:
        query = args[1]
        zmscontext.writeStdout('ZMSIndexZCatalog.%s: query=%s'%(func_,query))
        row = catalog(query)
        zmscontext.writeStdout('ZMSIndexZCatalog.%s: rows=%i'%(func_,len(row)))
        if len(row)==1:
          zmspath  = '%s/'%row[0]['getPath']
          zmscontext.writeStdout('ZMSIndexZCatalog.%s: zmspath=%s'%(func_,zmspath))
          l = zmspath[1:-1].split('/')
          ob = zmscontext
          while ob is not None and len(l) > 0:
            id = l[0]
            if not id.startswith('manage'):
              ob = getattr(ob,l[0],None)
            l = l[1:]
      return ob
    
    ##############################################################################
    # Reindex
    ##############################################################################
    elif func_ == 'reindex':
      rootelmnt = zmscontext.getRootElement()
      home = rootelmnt.getHome()
      # (Re-)create catalog.)
      if id in home.objectIds(['ZCatalog']):
        home.manage_delObjects(ids=[id])
      catalog = ZCatalog.ZCatalog(id=id, title=zmscontext.meta_id, container=home)
      home._setObject(catalog.id, catalog)
      catalog = getattr(home,id,None)
      addLexicon(catalog)
      # Add indices.
      for index_name in ['id','meta_id','get_oid']:
        index_type = 'ZCTextIndex'
        extra = Clazz()
        extra.doc_attr = index_name
        extra.index_type = 'Okapi BM25 Rank'
        extra.lexicon_id = 'Lexicon'
        catalog.manage_addIndex(index_name,index_type,extra)
      # Add columns
      for index_name in ['id','meta_id','getPath','get_oid']:
        catalog.manage_addColumn(index_name)
      # Visit tree
      def visit(node):
        l = []
        l.append(1)
        zmscontext.writeStdout('[ZMSIndexZCatalog_func_] catalog_object %s'%node.getPath())
        catalog.catalog_object(node, node.getPath())
        for childNode in node.getChildNodes():
          l.extend(visit(childNode))
        if node.meta_id == 'ZMS':
          node.setConfProperty('ZMS.InternalLinks.autocorrection',1)
          node.setConfProperty('ExtensionPoint.ZReferableItem.getRefObjPath','%s.getRefObjPath'%zmscontext.meta_id)
          node.setConfProperty('ExtensionPoint.ZReferableItem.getLinkObj','%s.getLinkObj'%zmscontext.meta_id)
          node.setConfProperty('ExtensionPoint.ZMSObject.get_uid','%s.get_uid'%zmscontext.meta_id)
          for childNode in node.getPortalClients():
            l.extend(visit(childNode))
        return l
      index = visit(zmscontext.getDocumentElement())
      zmscontext.writeStdout('[ZMSIndexZCatalog_func_] reindex %i'%len(index))
    
    ##############################################################################
    # Resync
    ##############################################################################
    elif func_ == 'resync':
      catalog = getattr(zmscontext,id,None)
      if catalog is not None:
        
        def find_node(base,path):
          ref = base
          for id in path.split('/'):
            if id == '..':
              parent = ref.getParentNode()
              if parent is not None:
                ref = ref.getParentNode()
            elif id not in ['','.'] and id.find('.')<0:
              childNode = getattr(ref,id,None)
              if childNode is None:
                break
              ref = childNode
          return ref
        
        def handleInline(node,v): 
          #zmscontext.writeStdout('[ZMSIndexZCatalog_func_] handleInline %s'%v)
          p = '<a (.*?)href="(.*?)"(.*?)>(.*?)<\\/a>'
          for f in node.re_findall(p,v):
            zmscontext.writeStdout('[ZMSIndexZCatalog_func_] handleInline f=%s'%str(f))
            ref = None
            attr = f[0]+f[2]
            if attr.find('data-id=') >= 0:
              data_id = attr[attr.find('data-id='):]
              data_id = data_id[data_id.find('"')+1:]
              data_id = data_id[:data_id.find('"')]
              zmscontext.writeStdout('[ZMSIndexZCatalog_func_] handleInline data_id=%s'%data_id)
              if not data_id.startswith('oid:'):
                ref = node.getLinkObj('{$%s}'%data_id)
            if ref is None:
              href = f[1]
              for prefix in [request['SERVER_URL'],zmscontext.getConfProperty('ASP.ip_or_domain','?')]:
                if href.startswith(prefix):
                  href = href[len(prefix):]
              zmscontext.writeStdout('[ZMSIndexZCatalog_func_] handleInline href=%s'%href)
              if href.startswith('.') or href.startswith('/'):
                ref = find_node(node,href)
            zmscontext.writeStdout('[ZMSIndexZCatalog_func_] handleInline ref=%s'%str(ref))
            if ref is not None:
              ref.refreshRefObj(node,request)
              old = (p.replace('\\','').replace('(.*?)','%s'))%tuple(f)
              new = '<a data-id="'+ref.get_oid()+'" '+re.sub('data-id="(.*?)"','',f[0])+'href="'+f[1]+'"'+re.sub('data-id="(.*?)"','',f[2])+'>'+f[3]+'</a>'
              zmscontext.writeStdout('[ZMSIndexZCatalog_func_] resync old:\'%s\''%old)
              zmscontext.writeStdout('[ZMSIndexZCatalog_func_] resync new:\'%s\''%new)
              v = v.replace(old,new)
          return v
        
        def handleUrl(node,v):
          #zmscontext.writeStdout('[ZMSIndexZCatalog_func_] handleUrl %s'%v)
          if v.startswith('{$') and v.endswith('}') \
             and not (v.startswith('{$__') and v.endswith('__}')) \
             and not (v.startswith('{$oid:')):
            ref = find_node(node,v[2:-1].replace('@','/content/'))
            if ref is not None:
              ref.refreshRefObj(node,request)
              old = v
              new = node.getRefObjPath(ref)
              zmscontext.writeStdout('[ZMSIndexZCatalog_func_] resync %s=>%s'%(old,new))
              v = new
          return v
        
        def visit(node):
          node.writeStdout('[ZMSIndexZCatalog_func_] resync')
          l = []
          l.append(1)
          if node.meta_id!='ZMSLinkElement' and node.getType()=='ZMSRecordSet':
            objAttrs = node.getMetaobjAttrs(node.meta_id)
            key = filter(lambda x:x['type']=='list',objAttrs)[0]['id']
            for obj_vers in node.getObjVersions():
              l = zmscontext.operator_getattr(obj_vers,key,[])
              for r in l:
                for objAttr in objAttrs:
                  datatype = objAttr['type']
                  if datatype in ['richtext','string','text','url']:
                    v = r.get(objAttr['id'],None)
                    if v is not None:
                      v = str(v)
                      o = v
                      if datatype in ['richtext','string','text']:
                        v = handleInline(node,v)
                      elif datatype in ['url']:
                        v = handleUrl(node,v)
                      if o != v:
                        r[objAttr['id']] = v
              zmscontext.operator_setattr(obj_vers,key,l)
          else:
            for key in filter(lambda x:not x.startswith('manage'),node.getObjAttrs().keys()):
              objAttr = node.getObjAttr(key)
              datatype = objAttr['datatype']
              if datatype in ['richtext','string','text','url']:
                lang_suffixes = ['']
                if objAttr['multilang']:
                  lang_suffixes = map(lambda x:'_%s'%x,zmscontext.getLangIds())
                for lang_suffix in lang_suffixes:
                  for obj_vers in node.getObjVersions():
                    v = zmscontext.operator_getattr(obj_vers,'%s%s'%(key,lang_suffix),None)
                    if v is not None:
                      v = str(v)
                      o = v
                      if datatype in ['richtext','string','text']:
                        v = handleInline(node,v)
                      elif datatype in ['url']:
                        v = handleUrl(node,v)
                      if o != v:
                        #zmscontext.writeStdout('[ZMSIndexZCatalog_func_] resync %s.%s'%(node.getPath(),key))
                        zmscontext.operator_setattr(obj_vers,'%s%s'%(key,lang_suffix),v)
          for childNode in node.getChildNodes():
            l.extend(visit(childNode))
          if node.meta_id == 'ZMS':
            for childNode in node.getPortalClients():
              l.extend(visit(childNode))
          return l
        
        index = visit(zmscontext.getDocumentElement()) # .portal.content.siteObjMap)
        zmscontext.writeStdout('[ZMSIndexZCatalog_func_] resync %i'%len(index))
  except:
    t,v,tb = sys.exc_info()
    msg = "[%s@%s]"%(zmscontext.meta_id,zmscontext.absolute_url())+''.join(format_exception(t, v, tb))
    logger.error(msg)
    zmscontext.writeStdout('[ZMSIndexZCatalog_func_] except %s'%msg)
  
  return zmscontext, args, kwargs]]>
                  </item>
                  <item key="id"><![CDATA[ZMSIndexZCatalog_func_]]></item>
                  <item key="mandatory" type="int">0</item>
                  <item key="multilang" type="int">0</item>
                  <item key="name"><![CDATA[Trusted functions]]></item>
                  <item key="repetitive" type="int">0</item>
                  <item key="type"><![CDATA[External Method]]></item>
                </dictionary>
              </item>
              <item type="dictionary">
                <dictionary>
                  <item key="custom"><![CDATA[## Script (Python) "ZMSIndexZCatalog.getLinkObj"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=zmscontext=None,options=None
##title=py: Hook: Get link object
##
# --// getLinkObj //--

query = None
obj = None
url = options['url']
zmscontext.writeStdout('ZMSIndexZCatalog.getLinkObj: url='+url)
zmsindex = getattr(zmscontext.getRootElement(),'zmsindex',None)
if zmsindex is not None and zmsindex.meta_id=='ZMSIndexZCatalog':
  if url.startswith('{$oid:') and url.endswith('}'):
    oid = url[5:-1]
    zmscontext.writeStdout('ZMSIndexZCatalog.getLinkObj: oid='+oid)
    query = {'get_oid':oid}
  elif url.startswith('{$') and url.endswith('}') and not (url.startswith('{$__') and url.endswith('__}')):
    docelmnt = None
    url = url[2:-1]
    i = url.find('#')
    if i > 0:
      url = url[:i]
    i = url.find('@')
    if i > 0:
      clientIds = url[:i].split('/')
      clientHome = zmscontext.getHome()
      for clientId in clientIds:
        clientHome = getattr(clientHome,clientId,None)
        if clientHome is None:
          break
      if clientHome is not None:
        obs = clientHome.objectValues(['ZMS'])
        if obs:
          docelmnt = obs[0]
      url = url[i+1:]
    else:
      docelmnt = zmscontext.getDocumentElement()
    if len(url) == 0:
      return docelmnt 
    elif docelmnt is not None:
      zmsid = url.split('/')[-1]
      zmscontext.writeStdout('ZMSIndexZCatalog.getLinkObj: zmsid='+zmsid)
      query = {'id':zmsid}
zmscontext.writeStdout('ZMSIndexZCatalog.getLinkObj: query='+str(query))
ob = zmscontext.ZMSIndexZCatalog_func_(zmscontext,'search',query)
return ob

# --// /getLinkObj //--
]]>
                  </item>
                  <item key="errors"></item>
                  <item key="id"><![CDATA[getLinkObj]]></item>
                  <item key="mandatory" type="int">0</item>
                  <item key="multilang" type="int">0</item>
                  <item key="name"><![CDATA[Hook: Get link object]]></item>
                  <item key="repetitive" type="int">0</item>
                  <item key="type"><![CDATA[py]]></item>
                </dictionary>
              </item>
              <item type="dictionary">
                <dictionary>
                  <item key="custom"><![CDATA[## Script (Python) "ZMSIndexZCatalog.onChangeObjEvt"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=zmscontext=None,options=None
##title=py: Event: On change object
##
# --// onChangeObjEvt //--

request = container.REQUEST
if zmscontext.meta_id=='ZMSIndexZCatalog' and request.get('btn') in ['reindex','resync']:
  zmscontext.writeStdout('[onChangeObjEvt] func=%s'%str(zmscontext.ZMSIndexZCatalog_func_(zmscontext,request.get('btn'))))

# --// /onChangeObjEvt //--
]]>
                  </item>
                  <item key="errors"></item>
                  <item key="id"><![CDATA[onChangeObjEvt]]></item>
                  <item key="mandatory" type="int">0</item>
                  <item key="multilang" type="int">0</item>
                  <item key="name"><![CDATA[Event: On change object]]></item>
                  <item key="repetitive" type="int">0</item>
                  <item key="type"><![CDATA[py]]></item>
                </dictionary>
              </item>
              <item type="dictionary">
                <dictionary>
                  <item key="custom"><![CDATA[## Script (Python) "ZMSIndexZCatalog.ObjectAdded"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=zmscontext=None
##title=py: Event: object added
##
# --// ObjectAdded //--

print "ZMSIndexZCatalog.ObjectAdded"
zmscontext.writeStdout("ObjectAdded: "+zmscontext.absolute_url())
zmsindex = getattr(zmscontext.getRootElement(),'zmsindex',None)
if zmsindex is not None and zmsindex.meta_id=='ZMSIndexZCatalog':
  catalog = getattr(zmscontext,'zcatalog_index',None)
  if catalog is not None:
    zmscontext.writeStdout("ZMSIndexZCatalog.ObjectAdded: premature commit")
    zmscontext.ZMSIndexZCatalog_func_(zmscontext,'commit')
    zmscontext.writeStdout("ZMSIndexZCatalog.ObjectAdded: url=%s"%zmscontext.getPath())
    catalog.catalog_object(zmscontext, zmscontext.getPath())
return printed

# --// /ObjectAdded //--
]]>
                  </item>
                  <item key="errors"></item>
                  <item key="id"><![CDATA[ObjectAdded]]></item>
                  <item key="mandatory" type="int">0</item>
                  <item key="multilang" type="int">0</item>
                  <item key="name"><![CDATA[Event: object added]]></item>
                  <item key="repetitive" type="int">0</item>
                  <item key="type"><![CDATA[py]]></item>
                </dictionary>
              </item>
              <item type="dictionary">
                <dictionary>
                  <item key="custom"><![CDATA[## Script (Python) "ZMSIndexZCatalog.ObjectMoved"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=zmscontext=None
##title=py: Event: object moved
##
# --// ObjectMoved //--

print "ZMSIndexZCatalog.ObjectMoved"
zmscontext.writeStdout("ObjectMoved: "+zmscontext.absolute_url())
zmsindex = getattr(zmscontext.getRootElement(),'zmsindex',None)
if zmsindex is not None and zmsindex.meta_id=='ZMSIndexZCatalog':
  catalog = getattr(zmscontext,'zcatalog_index',None)
  if catalog is not None:
    zmscontext.writeStdout("ZMSIndexZCatalog.ObjectMoved: url=%s"%zmscontext.getPath())
    query = {'get_oid':zmscontext.get_oid()}
    row = catalog(query)
    for r in row:
      zmscontext.writeStdout("ZMSIndexZCatalog.ObjectMoved: uncatalog_object url=%s"%r['getPath'])
      catalog.uncatalog_object(r['getPath'])
    catalog.catalog_object(zmscontext, zmscontext.getPath())
return printed

# --// /ObjectMoved //--
]]>
                  </item>
                  <item key="errors"></item>
                  <item key="id"><![CDATA[ObjectMoved]]></item>
                  <item key="mandatory" type="int">0</item>
                  <item key="multilang" type="int">0</item>
                  <item key="name"><![CDATA[Event: object moved]]></item>
                  <item key="repetitive" type="int">0</item>
                  <item key="type"><![CDATA[py]]></item>
                </dictionary>
              </item>
              <item type="dictionary">
                <dictionary>
                  <item key="custom"><![CDATA[## Script (Python) "ZMSIndexZCatalog.ObjectRemoved"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=zmscontext=None
##title=py: Event: object removed
##
# --// ObjectRemoved //--

print "ZMSIndexZCatalog.ObjectRemoved"
zmscontext.writeStdout("ObjectRemoved: "+zmscontext.absolute_url())
zmsindex = getattr(zmscontext.getRootElement(),'zmsindex',None)
if zmsindex is not None and zmsindex.meta_id=='ZMSIndexZCatalog':
  catalog = getattr(zmscontext,'zcatalog_index',None)
  if catalog is not None:
    zmscontext.writeStdout("ZMSIndexZCatalog.ObjectRemoved: url=%s"%zmscontext.getPath())
    catalog.uncatalog_object(zmscontext.getPath())
return printed

# --// /ObjectRemoved //--
]]>
                  </item>
                  <item key="errors"></item>
                  <item key="id"><![CDATA[ObjectRemoved]]></item>
                  <item key="mandatory" type="int">0</item>
                  <item key="multilang" type="int">0</item>
                  <item key="name"><![CDATA[Event: object removed]]></item>
                  <item key="repetitive" type="int">0</item>
                  <item key="type"><![CDATA[py]]></item>
                </dictionary>
              </item>
              <item type="dictionary">
                <dictionary>
                  <item key="custom"><![CDATA[## Script (Python) "ZMSIndexZCatalog.getRefObjPath"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=zmscontext=None,options=None
##title=py: Hook: Get ref object path
##
# --// getRefObjPath //--

ob = options['ob']
anchor = options['anchor']
ref = ob.get_oid()
if anchor:
  ref += '#'+anchor
zmscontext.writeLog('ZMSIndexZCatalog.getRefObjPath: ref='+ref)
return '{$%s}'%ref

# --// /getRefObjPath //--
]]>
                  </item>
                  <item key="errors"></item>
                  <item key="id"><![CDATA[getRefObjPath]]></item>
                  <item key="mandatory" type="int">0</item>
                  <item key="multilang" type="int">0</item>
                  <item key="name"><![CDATA[Hook: Get ref object path]]></item>
                  <item key="repetitive" type="int">0</item>
                  <item key="type"><![CDATA[py]]></item>
                </dictionary>
              </item>
              <item type="dictionary">
                <dictionary>
                  <item key="custom"><![CDATA[## Script (Python) "ZMSIndexZCatalog.get_uid"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=zmscontext=None,options=None
##title=py: Hook: Get oid as uid
##
# --// get_uid //--

return zmscontext.get_oid()

# --// /get_uid //--
]]>
                  </item>
                  <item key="errors"></item>
                  <item key="id"><![CDATA[get_uid]]></item>
                  <item key="mandatory" type="int">0</item>
                  <item key="multilang" type="int">0</item>
                  <item key="name"><![CDATA[Hook: Get oid as uid]]></item>
                  <item key="repetitive" type="int">0</item>
                  <item key="type"><![CDATA[py]]></item>
                </dictionary>
              </item>
            </list>
          </item>
          <item key="access" type="dictionary">
            <dictionary>
              <item key="delete_custom"></item>
              <item key="delete_deny" type="list">
                <list>
                  <item></item>
                  <item></item>
                  <item></item>
                </list>
              </item>
              <item key="insert_custom"><![CDATA[{$}]]></item>
              <item key="insert_deny" type="list">
                <list>
                  <item></item>
                  <item></item>
                  <item></item>
                </list>
              </item>
            </dictionary>
          </item>
          <item key="enabled" type="int">0</item>
          <item key="id"><![CDATA[ZMSIndexZCatalog]]></item>
          <item key="name"><![CDATA[ZMSIndexZCatalog]]></item>
          <item key="package"><![CDATA[com.zms.index]]></item>
          <item key="revision"><![CDATA[0.9.18]]></item>
          <item key="type"><![CDATA[ZMSResource]]></item>
        </dictionary>
      </item>
    </dictionary>
  </item>
  <item type="dictionary">
    <dictionary>
      <item key="key"><![CDATA[com.zms.index]]></item>
      <item key="value" type="dictionary">
        <dictionary>
          <item key="__obj_attrs__" type="list">
            <list>
            </list>
          </item>
          <item key="enabled" type="int">1</item>
          <item key="id"><![CDATA[com.zms.index]]></item>
          <item key="name"><![CDATA[com.zms.index]]></item>
          <item key="package"></item>
          <item key="revision"><![CDATA[0.9.18]]></item>
          <item key="type"><![CDATA[ZMSPackage]]></item>
        </dictionary>
      </item>
    </dictionary>
  </item>
</list>